import { connect } from 'react-redux';

import { meFromToken, meFromTokenSuccess, meFromTokenFailure, resetToken } from '../actions/users';
import Header from '../components/Header.js';

const mapDispatchToProps = (dispatch) => {
  return {
    loadUserFromToken: () => {
      let token = sessionStorage.getItem('jwtToken');
      if(!token || token === '') {//if there is no token, dont bother
  	return;
      }

      //fetch user from token (if server deems it's valid token)
      dispatch(meFromToken(token))
        .then((response) => {
          if (!response.error) {
            //reset token (possibly new token that was regenerated by the server)
            sessionStorage.setItem('jwtToken', response.payload.data.token);
            dispatch(meFromTokenSuccess(response.payload))
          } else {
            sessionStorage.removeItem('jwtToken');//remove token from storage
            dispatch(meFromTokenFailure(response.payload));
          }
        });
    },
    logout: () =>{
      sessionStorage.removeItem('jwtToken'); //remove token from storage
      dispatch(resetToken());
    },
    resetMe: () =>{
      sessionStorage.removeItem('jwtToken'); //remove token from storage
      dispatch(resetToken());
    }
  };
};


function mapStateToProps(state, ownProps) {
  return { 
    user: state.user
  };
}


// connect: first argument is mapStateToProps, 2nd is mapDispatchToProps
// reduxForm: 1st is form config, 2nd is mapStateToProps, 3rd is mapDispatchToProps
export default connect(mapStateToProps, mapDispatchToProps)(Header);
